#travis configuration for coverage testing
language: c

#sudo: false # only for faster builds

# Compiler selection
compiler:
  - clang
  - gcc

matrix:
      include:
         - os: linux
             dist: trusty
             sudo: true
             compiler: gcc
             addons:
               apt:
                  packages: &precise_latest_boost_packages
                    - gcc-4.8
                    - g++-4.8
                   #- gcov-4.9
                    - clang-3.7
                    - valgrind
                   # Misc
                    - python-yaml
                    - lcov
                    - libopencv-dev
                  sources: &precise_latest_boost_sources
                    - ubuntu-toolchain-r-test
                    - llvm-toolchain-precise-3.7

# Build steps
script: if [ "${COVERITY_SCAN_BRANCH}" != 1 ]; then 
        mkdir -p build
        cd build
        cmake ../
        make ;
        fi

env:
        global:
                # COVERITY_SCAN_TOKEN
                # ** specific to your project **
                - secure: "xxxx"
              # Ubuntu version
                - LINUX_DIST=trusty
                - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
              # Global build options and C++ flags
                - CXX_FLAGS="-Wall -pedantic -Werror -Wno-variadic-macros -Wno-long-long -Wno-shadow"
              # Misc
                - RUN_TESTS=true
                - COVERAGE=false

install:
            - if [ "$CXX" = "clang++" ] && [ "$TRAVIS_OS_NAME" = "linux" ]; then export CXX="clang++-3.7" CC="clang-3.7"; fi
            - echo ${PATH}
            - echo ${CXX}
            - ${CXX} --version
            - ${CXX} -v
           # Download and install recent cmake
addons:
        coverity_scan:
                project:
                        name: libuv_fork
                        version: master
                        description: Libuv fork for coverity scan

                notification_email: rodrigo.pulido@intel.com
                build_command_prepend: mkdir -p build && cd build
                build_command_prepend: cmake ../
                build_command: make
                branch_pattern: coverity_scan
